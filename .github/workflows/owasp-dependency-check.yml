name: "OWASP Dependency Check"

on:
  # Schedule it to run weekly on Monday
  schedule:
    - cron: '0 8 * * 1'  # Monday at 8:00 UTC
  # Run on demand
  workflow_dispatch:
    inputs:
      failOnCVSS:
        description: 'CVSS Score threshold to fail the build (e.g., 7)'
        required: false
        default: '7'
        type: string
      scan-path:
        description: 'Path to scan (e.g., ui.frontend, core)'
        required: false
        default: 'ui.frontend'
        type: string
  # Run on pull requests to main
  pull_request:
    branches: [ "main" ]
    paths:
      - 'ui.frontend/package.json'
      - 'ui.frontend/package-lock.json'
      - '**/pom.xml'
  # Run on pushes to main that change dependencies
  push:
    branches: [ "main" ]
    paths:
      - 'ui.frontend/package.json'
      - 'ui.frontend/package-lock.json'
      - '**/pom.xml'

permissions:
  contents: read
  security-events: write
  # For PR comments
  pull-requests: write

jobs:
  dependency-check:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'ui.frontend/package.json'

      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'
          
      - name: Install NPM dependencies
        run: cd ui.frontend && npm ci
        
      # Determine the path to scan based on input or default
      - name: Set scan path
        id: scan-path
        run: |
          SCAN_PATH="${{ github.event.inputs.scan-path }}"
          if [ -z "$SCAN_PATH" ]; then
            SCAN_PATH="ui.frontend"
          fi
          echo "path=$SCAN_PATH" >> $GITHUB_OUTPUT
          
      # Determine CVSS threshold based on input or default  
      - name: Set CVSS threshold
        id: cvss
        run: |
          CVSS="${{ github.event.inputs.failOnCVSS }}"
          if [ -z "$CVSS" ]; then
            CVSS="7"
          fi
          echo "threshold=$CVSS" >> $GITHUB_OUTPUT
          
      # Create suppressions file if it doesn't exist
      - name: Ensure suppressions file exists
        run: |
          mkdir -p .github
          if [ ! -f .github/dependency-check-suppressions.xml ]; then
            echo '<?xml version="1.0" encoding="UTF-8"?>
            <suppressions xmlns="https://jeremylong.github.io/DependencyCheck/dependency-suppression.1.3.xsd">
              <!-- Add suppressions here -->
            </suppressions>' > .github/dependency-check-suppressions.xml
          fi

      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'aem-guides-wknd'
          path: ${{ steps.scan-path.outputs.path }}
          format: 'ALL'
          out: 'reports'
          args: >
            --scan ${{ steps.scan-path.outputs.path }}
            --suppression ./.github/dependency-check-suppressions.xml
            --failOnCVSS ${{ steps.cvss.outputs.threshold }}
            --enableExperimental

      - name: Upload dependency check report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-check-reports
          path: reports/
          
      - name: Generate Job Summary
        if: always()
        run: |
          echo "# OWASP Dependency Check Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check if the HTML report exists
          if [ -f "reports/dependency-check-report.html" ]; then
            # Count vulnerabilities by severity
            HIGH_COUNT=$(grep -o "Highest Severity: High" reports/dependency-check-report.html | wc -l || echo "0")
            CRITICAL_COUNT=$(grep -o "Highest Severity: Critical" reports/dependency-check-report.html | wc -l || echo "0")
            
            if [ "$HIGH_COUNT" -gt 0 ] || [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "⚠️ Vulnerabilities found:" >> $GITHUB_STEP_SUMMARY
              [ "$CRITICAL_COUNT" -gt 0 ] && echo "- Critical: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
              [ "$HIGH_COUNT" -gt 0 ] && echo "- High: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "See the uploaded artifact 'dependency-check-reports' for detailed information." >> $GITHUB_STEP_SUMMARY
            else
              echo "✅ No high or critical vulnerabilities found." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ Dependency check report not generated. Check the logs for errors." >> $GITHUB_STEP_SUMMARY
          fi
          
      # Post a comment on the PR with the results
      - name: Post PR Comment
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            try {
              // Check if the report exists
              if (!fs.existsSync('reports/dependency-check-report.html')) {
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: '❌ OWASP Dependency Check failed to generate a report. Please check the workflow logs.'
                });
                return;
              }
              
              // Count vulnerabilities
              const reportHtml = fs.readFileSync('reports/dependency-check-report.html', 'utf8');
              const criticalCount = (reportHtml.match(/Highest Severity: Critical/g) || []).length;
              const highCount = (reportHtml.match(/Highest Severity: High/g) || []).length;
              
              let commentBody = '## OWASP Dependency Check Results\n\n';
              
              if (criticalCount > 0 || highCount > 0) {
                commentBody += '⚠️ **Vulnerabilities found:**\n\n';
                if (criticalCount > 0) commentBody += `- Critical: ${criticalCount}\n`;
                if (highCount > 0) commentBody += `- High: ${highCount}\n`;
                commentBody += '\nPlease review the full report in the workflow artifacts.';
              } else {
                commentBody += '✅ No high or critical vulnerabilities found in the dependencies.';
              }
              
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
            } catch (error) {
              console.error('Error posting comment:', error);
            }