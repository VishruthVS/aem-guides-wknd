name: "CodeQL Analysis"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '0 0 * * 0'  # Run once a week on Sunday
  workflow_dispatch:  # Allow manual triggering

# Set permissions
permissions:
  actions: read
  contents: read
  security-events: write

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript
        queries: +./.github/codeql/custom-queries

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:javascript"
        output: sarif-results

    - name: Upload SARIF results as artifact
      uses: actions/upload-artifact@v4
      with:
        name: codeql-sarif-results
        path: sarif-results
        retention-days: 7
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '16'
        
    # Debug step to see what's in the SARIF directory
    - name: Debug SARIF directory
      run: |
        find sarif-results -type f | sort
        
    # Generate dashboard data from SARIF files  
    - name: Generate dashboard data from SARIF
      run: |
        # Create a default empty dashboard data file
        echo '{"issues":[],"severityCounts":{"critical":0,"high":0,"medium":0,"low":0}}' > ./dashboard-data.json
        
        # Run the dashboard generator script
        node .github/codeql/sarif-to-dashboard.js sarif-results ./dashboard-data.json || echo "Error processing SARIF files - using default data"
        
        # For debugging - show the generated data
        echo "Generated dashboard data:"
        cat ./dashboard-data.json
        
    # Install jq for JSON processing
    - name: Install jq
      run: sudo apt-get install -y jq
      
    # Add a summary report to the GitHub Actions run
    - name: Create GitHub Actions Summary
      run: |
        echo "# CodeQL Analysis Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add severity counts
        echo "## Summary of Issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Extract severity counts
        CRITICAL=$(jq -r '.severityCounts.critical // 0' ./dashboard-data.json)
        HIGH=$(jq -r '.severityCounts.high // 0' ./dashboard-data.json)
        MEDIUM=$(jq -r '.severityCounts.medium // 0' ./dashboard-data.json)
        LOW=$(jq -r '.severityCounts.low // 0' ./dashboard-data.json)
        TOTAL=$((CRITICAL + HIGH + MEDIUM + LOW))
        
        # Display severity counts with emoji indicators
        echo "- ðŸ”´ **Critical:** ${CRITICAL}" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸŸ  **High:** ${HIGH}" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸŸ¡ **Medium:** ${MEDIUM}" >> $GITHUB_STEP_SUMMARY
        echo "- ðŸ”µ **Low:** ${LOW}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total:** ${TOTAL}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Create a table with the issues
        echo "## Security Issues" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check if there are any issues
        ISSUE_COUNT=$(jq '.issues | length' ./dashboard-data.json)
        
        if [ "$ISSUE_COUNT" -gt 0 ]; then
          echo "| Severity | Rule | Location | Message |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- | --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          # Extract information from dashboard data
          jq -r '.issues[] | "| " + .severity + " | " + .rule + " | " + .location + " | " + .message + " |"' ./dashboard-data.json >> $GITHUB_STEP_SUMMARY
        else
          echo "ðŸŽ‰ **No security issues found!**" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Add top vulnerable files if available
        if jq -e '.topFiles' ./dashboard-data.json > /dev/null 2>&1; then
          echo "## Top Files with Issues" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| File | Issue Count |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          jq -r '.topFiles | to_entries | sort_by(.value) | reverse | .[0:5] | .[] | "| " + .key + " | " + (.value | tostring) + " |"' ./dashboard-data.json >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add categories breakdown if available
        if jq -e '.categories' ./dashboard-data.json > /dev/null 2>&1; then
          echo "## Issues by Category" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Category | Count |" >> $GITHUB_STEP_SUMMARY
          echo "| --- | --- |" >> $GITHUB_STEP_SUMMARY
          
          jq -r '.categories | to_entries | sort_by(.value) | reverse | .[] | "| " + .key + " | " + (.value | tostring) + " |"' ./dashboard-data.json >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Add a note about SARIF artifacts
        echo "## About This Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "This is an automatically generated report from CodeQL analysis. The full SARIF results are available as artifacts in this workflow run." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Run completed at: $(date)" >> $GITHUB_STEP_SUMMARY
    
    # Generate HTML reports from SARIF files (only for artifact, not for display)
    - name: Generate HTML report with SARIF Multitool
      run: |
        npm install -g @microsoft/sarif-multitool
        mkdir -p ./html-reports
        
        # Process each SARIF file to generate HTML reports
        find sarif-results -type f -name "*.sarif" | while read file; do
          filename=$(basename "$file" .sarif)
          sarif-multitool transform -t HTML -o "./html-reports/${filename}.html" "$file" || echo "Error processing $file"
        done
        
    # Upload the HTML reports as artifacts for download
    - name: Upload HTML reports as artifact
      uses: actions/upload-artifact@v4
      with:
        name: codeql-html-reports
        path: ./html-reports
        retention-days: 7